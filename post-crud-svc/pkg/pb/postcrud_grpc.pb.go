// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/pb/postcrud.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostCRUDServiceClient is the client API for PostCRUDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostCRUDServiceClient interface {
	Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	Update(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*RequestResponse, error)
	Delete(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*RequestResponse, error)
	Read(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostResponse, error)
	List(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error)
}

type postCRUDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostCRUDServiceClient(cc grpc.ClientConnInterface) PostCRUDServiceClient {
	return &postCRUDServiceClient{cc}
}

func (c *postCRUDServiceClient) Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/postcrud.PostCRUDService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postCRUDServiceClient) Update(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/postcrud.PostCRUDService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postCRUDServiceClient) Delete(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/postcrud.PostCRUDService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postCRUDServiceClient) Read(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostResponse, error) {
	out := new(ReadPostResponse)
	err := c.cc.Invoke(ctx, "/postcrud.PostCRUDService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postCRUDServiceClient) List(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error) {
	out := new(ListPostResponse)
	err := c.cc.Invoke(ctx, "/postcrud.PostCRUDService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostCRUDServiceServer is the server API for PostCRUDService service.
// All implementations should embed UnimplementedPostCRUDServiceServer
// for forward compatibility
type PostCRUDServiceServer interface {
	Create(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	Update(context.Context, *UpdatePostRequest) (*RequestResponse, error)
	Delete(context.Context, *DeletePostRequest) (*RequestResponse, error)
	Read(context.Context, *ReadPostRequest) (*ReadPostResponse, error)
	List(context.Context, *ListPostRequest) (*ListPostResponse, error)
}

// UnimplementedPostCRUDServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPostCRUDServiceServer struct {
}

func (UnimplementedPostCRUDServiceServer) Create(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostCRUDServiceServer) Update(context.Context, *UpdatePostRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostCRUDServiceServer) Delete(context.Context, *DeletePostRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostCRUDServiceServer) Read(context.Context, *ReadPostRequest) (*ReadPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPostCRUDServiceServer) List(context.Context, *ListPostRequest) (*ListPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafePostCRUDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostCRUDServiceServer will
// result in compilation errors.
type UnsafePostCRUDServiceServer interface {
	mustEmbedUnimplementedPostCRUDServiceServer()
}

func RegisterPostCRUDServiceServer(s grpc.ServiceRegistrar, srv PostCRUDServiceServer) {
	s.RegisterService(&PostCRUDService_ServiceDesc, srv)
}

func _PostCRUDService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCRUDServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postcrud.PostCRUDService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCRUDServiceServer).Create(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostCRUDService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCRUDServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postcrud.PostCRUDService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCRUDServiceServer).Update(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostCRUDService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCRUDServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postcrud.PostCRUDService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCRUDServiceServer).Delete(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostCRUDService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCRUDServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postcrud.PostCRUDService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCRUDServiceServer).Read(ctx, req.(*ReadPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostCRUDService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCRUDServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postcrud.PostCRUDService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCRUDServiceServer).List(ctx, req.(*ListPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostCRUDService_ServiceDesc is the grpc.ServiceDesc for PostCRUDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostCRUDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postcrud.PostCRUDService",
	HandlerType: (*PostCRUDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostCRUDService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PostCRUDService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PostCRUDService_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _PostCRUDService_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PostCRUDService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/postcrud.proto",
}
